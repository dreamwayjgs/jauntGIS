{"version":3,"sources":["CoordForm.js","DaumMapApi.js","MapProvider.js","Debugger.js","FileForm.js","DataSrc.js","DataSource.js","LocationFix.js","DataControl.js","DataMaster.js","App.js","Root.js","registerServiceWorker.js","index.js"],"names":["CoordForm","state","lat","lng","handleChange","e","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","props","updateMapCenter","Debugger","p","this","react_default","a","createElement","onSubmit","className","htmlFor","type","id","placeholder","onChange","Component","DaumMap","window","daum","maps","DaumMapApi","MarkerImage","Size","offset","Point","alt","shape","coords","coord2AddressDaum","result","Promise","resolve","services","Geocoder","coord2Address","status","Status","OK","address","address_name","MapProvider","centerLat","centerLng","map","markers","fixes","moveMapCenter","setCenter","LatLng","getAddress","then","data","prevProps","prevState","_this2","marker","index","event","addListener","getPosition","getLat","getLng","onFocus","InfoWindow","content","concat","srcId","color","removable","open","nextProps","nextState","_this3","isFixUpdated","center","length","fix","daumMarker","console","log","_this4","load","Map","document","getElementById","level","latlng","getCenter","src_CoordForm","arguments","constructor","msg","i","FileForm","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","file","csv","fileName","onFormSubmit","bind","assertThisInitialized","fileUpload","dir","config","delimiter","header","complete","results","onCreate","Papa","parse","alert","files","role","data-dismiss","aria-label","aria-hidden","DataSrc","positions","fields","toHtmlString","DataSource","dataSources","dataSrcId","closePanel","onClose","handleFile","datasrc","RandomColor","seed","replace","meta","onDataUpdate","removeDataSrc","row","parentNode","parseInt","$","attr","filter","isSrcUpdated","promptType","modal","isVisible","list","key","datasrcid","scope","style","backgroundColor","onClick","lib_default","position","zIndex","dimMode","data-toggle","data-target","src_FileForm","LocationFix","deviceId","fixtime","servertime","ref","parseFloat","Marker","clickable","image","dataSrc","defaultColor","limitFixGroup","some","pos","push","limit","fixGroups","forEach","group","DataControl","lastFixId","toggleMarker","evt","closest","currentTarget","test","onUpdate","focusFixId","html","top","animate","scrollTop","srcToFixGroups","fixGroup","reduce","sum","item","flattenFixGroups","table","fixid","react_contenteditable_default","disabled","DataMaster","isVisiableDataSource","isVisiableDataControl","closeDataControl","toggleDataControl","updateFixes","openWithCsv","closeDataSource","toggleDataSource","dataUpdate","href","aria-controls","aria-expanded","src_DataSource","src_DataControl","App","focusFix","fixId","src_DataMaster","src_MapProvider","Root","src_App_0","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_Root","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7be40c77.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport Debugger from './Debugger'\r\n\r\nclass CoordForm extends Component {\r\n    state = {\r\n        lat: '',\r\n        lng: ''\r\n    }\r\n    handleChange = (e) => {\r\n        /* TODO\r\n        위도 쪽에 comma 를 감지해서 해당 경우에는 자동으로 lat, lng을 보내는 기능\r\n         */\r\n\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    handleSubmit = (e) => {\r\n        // 페이지 리로딩 방지\r\n        e.preventDefault();\r\n        // 상태값을 onCreate 를 통하여 부모에게 전달\r\n        this.props.updateMapCenter(this.state);\r\n    }\r\n\r\n    render() {\r\n        Debugger.p(this, 'render')\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"form-row align-items-center\">\r\n                    <div className=\"col-auto\">\r\n                    <label className=\"sr-only\" htmlFor=\"inlineFormInput\">Latitude</label>\r\n                    <input type=\"text\" className=\"form-control mb-2 coord\" id=\"inlineFormInput\" placeholder=\"Latitude\" value={this.state.lat}\r\n                    onChange={this.handleChange}\r\n                    name=\"lat\" />\r\n                    </div>\r\n                    <div className=\"col-auto\">\r\n                    <label className=\"sr-only\" htmlFor=\"inlineFormInput\">Latitude</label>\r\n                    <input type=\"text\" className=\"form-control mb-2 coord\" id=\"inlineFormInput\" placeholder=\"Longitude\" value={this.state.lng}\r\n                    onChange={this.handleChange}\r\n                    name=\"lng\" />\r\n                    </div>                    \r\n                    <div className=\"col-auto\">\r\n                    <button type=\"submit\" className=\"btn btn-primary mb-2\">Go</button>\r\n                    </div>\r\n                </div>\r\n            </form>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default CoordForm;","const DaumMap = window.daum.maps;\r\n\r\n\r\nclass DaumMapApi {\r\n    static async getAddress(lat, lng) {\r\n        let result = await this.coord2AddressDaum(lat, lng);\r\n        return result;\r\n    }\r\n\r\n    static coord2AddressDaum(lat, lng) {\r\n        return new Promise(resolve => {\r\n            let geocoder = new DaumMap.services.Geocoder();\r\n            geocoder.coord2Address(lng, lat, (result, status) => {\r\n                if (status === DaumMap.services.Status.OK) {\r\n                    resolve(result[0].address.address_name);\r\n                }\r\n                resolve(\"해당 위치 주소 없음\")\r\n            })\r\n        })\r\n    }\r\n\r\n    get markerImage() {\r\n        let icon = new DaumMap.MarkerImage(\r\n            'http://localimg.daum-img.net/localimages/07/2009/map/icon/blog_icon01_on.png',\r\n            new DaumMap.Size(31, 35),\r\n            {\r\n                offset: new DaumMap.Point(16, 34),\r\n                alt: \"마커 이미지 예제\",\r\n                shape: \"poly\",\r\n                coords: \"1,20,1,9,5,2,10,0,21,0,27,3,30,9,30,20,17,33,14,33\"\r\n            }\r\n        )\r\n        return icon\r\n    }\r\n}\r\n\r\nexport default DaumMapApi;","/* global daum */\r\n\r\nimport React, { Component } from 'react';\r\nimport CoordForm from \"./CoordForm\";\r\nimport DaumMapApi from \"./DaumMapApi\"\r\n\r\n\r\nimport Debugger from './Debugger'\r\n\r\nconst DaumMap = window.daum.maps;\r\n\r\nclass MapProvider extends Component {\r\n\r\n    state = {\r\n        centerLat: 0,\r\n        centerLng: 0,\r\n        address: '',\r\n        map: null,\r\n        markers: [],\r\n        fixes: []\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.markers !== this.state.markers) {\r\n            // 마커 바뀜\r\n            this.state.markers.map((marker, index) => {                \r\n                DaumMap.event.addListener(marker, 'click', () => {\r\n                    // 마커 클릭 이벤트                    \r\n                    this.moveMapCenter(marker.getPosition().getLat(), marker.getPosition().getLng())                                        \r\n                    this.props.onFocus(index)                    \r\n                    let fixes = this.state.fixes\r\n                    let infoWindow = new DaumMap.InfoWindow({\r\n                        content: `<div>\r\n                        <span>Src: ${fixes[index].srcId} </span>\r\n                        <span>Id: ${fixes[index].id} </span>\r\n                        <span style='background-color:#${fixes[index].color};'>${fixes[index].color}</span>\r\n                        </div>`,\r\n                        removable: true\r\n                    })\r\n                    infoWindow.open(this.state.map, marker)\r\n                })\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} nextProps \r\n     * @param {*} nextState \r\n     * 렌더링 전. props의 정보에 따라 마커를 렌더링 해야한다\r\n     */\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.props.isFixUpdated) {\r\n            Debugger.p(this, 'marker update', this.props, nextProps, this.state, nextState)\r\n            // 렌더링 전에 받아놓은 fixes 로 마커를 처리            \r\n\r\n            let fixes = nextProps.fixes            \r\n            let center = [this.state.centerLat, this.state.centerLng]\r\n            if(fixes.length > this.state.fixes.length){\r\n                // Source added\r\n                center = [fixes[this.state.fixes.length].lat, fixes[this.state.fixes.length].lng]\r\n            }            \r\n            // 마커 그리기\r\n            this.setState({\r\n                fixes: fixes,\r\n                markers: fixes.map(fix => (\r\n                    fix.daumMarker(this.state.map)\r\n                )),\r\n                centerLat: center[0],\r\n                centerLng: center[1]\r\n            }, () => {\r\n                console.log(\"marker OK\")\r\n                this.moveMapCenter(this.state.centerLat, this.state.centerLng)\r\n            })\r\n        }\r\n        return true\r\n    }\r\n\r\n    componentDidMount() {\r\n        DaumMap.load(() => {\r\n            // init location\r\n            let lat = 37.555589\r\n            let lng = 127.049051\r\n\r\n            //지도 생성\r\n            let map = new DaumMap.Map(document.getElementById('map'), {\r\n                center: new DaumMap.LatLng(33.4863, 126.489),\r\n                level: 3,\r\n            });\r\n            DaumMapApi.getAddress(lat, lng).then(result => {\r\n                this.setState({\r\n                    address: result,\r\n                    centerLat: lat,\r\n                    centerLng: lng,\r\n                    map: map\r\n                })\r\n            })\r\n\r\n            //이동시 지도 중앙 좌표와 동 갱신\r\n            DaumMap.event.addListener(map, 'dragend', () => {\r\n                let latlng = map.getCenter();\r\n\r\n                DaumMapApi.getAddress(latlng.getLat(), latlng.getLng()).then(result => {\r\n                    this.setState({\r\n                        centerLat: latlng.getLat(),\r\n                        centerLng: latlng.getLng(),\r\n                        address: result\r\n                    })\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    moveMapCenter = (lat, lng) => {\r\n        this.setState({\r\n            centerLat: lat,\r\n            centerLng: lng,\r\n        }, () => {\r\n            this.state.map.setCenter(new DaumMap.LatLng(lat, lng));\r\n            DaumMapApi.getAddress(lat, lng).then(result => {\r\n                this.setState({\r\n                    address: result\r\n                })\r\n            })\r\n        })\r\n    }\r\n\r\n    updateMapCenter = (data) => {\r\n        this.moveMapCenter(data.lat, data.lng)\r\n    };\r\n\r\n    render() {\r\n        Debugger.p(this, 'render')\r\n        return (\r\n            <div className=\"d-flex flex-column h-100\">\r\n                <div className=\"d-flex justify-content-center\">\r\n                    <div className=\"px-1\">\r\n                        <CoordForm updateMapCenter={this.updateMapCenter} />\r\n                    </div>\r\n                    <div className=\"px-1\" id=\"currentpos\">\r\n                        현재 중심: {this.state.centerLat}, {this.state.centerLng} <br /> 주소: {this.state.address}\r\n                    </div>\r\n                </div>\r\n                <div className=\"d-flex h-100\">\r\n                    <div className=\"w-100 h-100\" id=\"map\">지도 표시되는 공간</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MapProvider;","import MapProvider from \"./MapProvider\";\r\n\r\nclass Debugger {\r\n    static p(){\r\n        // 찍고 싶은 모듈에 주석을 처리\r\n        let caller = arguments[0].constructor.name\r\n        switch(caller){\r\n            case 'App':\r\n\r\n            case 'DataMaster':\r\n            case 'DataControl':\r\n            case 'DataSource':     \r\n            case 'FileForm':\r\n            \r\n            case 'MapProvider':\r\n            case 'CoordForm':       \r\n            return\r\n        }\r\n        let msg = {}\r\n        for(let i = 1; i < arguments.length;i++){\r\n            msg[i] = arguments[i]\r\n        }                \r\n    }\r\n}\r\n\r\nexport default Debugger","import React, {Component} from 'react';\r\nimport Papa from 'papaparse';\r\n\r\nimport Debugger from './Debugger'\r\n\r\nclass FileForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            file: null,\r\n            csv: null,\r\n            fileName: \"Choose Files\"\r\n        }\r\n        this.onFormSubmit = this.onFormSubmit.bind(this)\r\n        this.onChange = this.onChange.bind(this)\r\n        this.fileUpload = this.fileUpload.bind(this)\r\n    }\r\n\r\n    onFormSubmit(e) {\r\n        /* TODO\r\n        여러 파일 처리 가능하게\r\n         */\r\n        e.preventDefault() // Stop form submit\r\n\r\n        try {\r\n            console.dir(this.state.file)\r\n            let fileName = this.state.file.name\r\n            let config = {\r\n                delimiter: \",\",\t// auto-detect\r\n                header: true,\r\n                complete: (results) => {\r\n                    console.log(\"Finished:\", results.data);\r\n                    this.setState({\r\n                        csv: results,\r\n                        fileName: fileName\r\n                    })\r\n                    this.props.onCreate(this.state);\r\n                }\r\n            }\r\n            Papa.parse(this.state.file, config);            \r\n        }\r\n        catch(e){\r\n            alert(\"잘못된 파일 또는 파일이 없습니다.\", e)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     */\r\n    onChange(e) {\r\n        /* TODO\r\n        여러 파일 처리 가능하게, input 에 multiple 속성 만들것\r\n         */\r\n        try {\r\n            this.setState({file: e.target.files[0], fileName: e.target.files[0].name})\r\n        }\r\n        catch (e) {\r\n            console.log(\"업로드 취소\")\r\n            this.setState({fileName: \"Choose File\"})\r\n        }\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {*} file user uploaded file\r\n     * 파일을 서버에 저장하는 함수\r\n     */\r\n    fileUpload(file) {\r\n        console.log(file);        \r\n        return -1\r\n    }\r\n\r\n    render() {\r\n        Debugger.p(this, 'render')\r\n        return (\r\n            <div className=\"modal\" id=\"fileform\" role=\"dialog\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\">CSV 파일 업로드</h5>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                        <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body uploader\">                                            \r\n                    Available Headers (deviceid, lat, lng, timestamp)                    \r\n                    <form className=\"form-inline\" onSubmit={this.onFormSubmit}>\r\n                        <div className=\"input-group container-fluid w-100\">\r\n                            <div className=\"custom-file\">\r\n                                <input type=\"file\" className=\"custom-file-input\" id=\"csvFile\" onChange={this.onChange} />\r\n                                <label className=\"custom-file-label d-flex justify-content-center\" htmlFor=\"csvFile\">{this.state.fileName}</label>\r\n                            </div>\r\n                            <div className=\"input-group-append\">\r\n                                <button className=\"btn btn-outline-primary\" type=\"submit\">Upload</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                    </div>                    \r\n                    <div className=\"modal-footer\">\r\n                        <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Done</button>                        \r\n                    </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileForm;","class DataSrc {\r\n    constructor(id, name, type, color, positions, fields) {\r\n        this.id = id\r\n        this.name = name\r\n        this.type = type\r\n        this.color = color\r\n        this.positions = positions\r\n        this.fields = fields\r\n    }\r\n    get html() {\r\n        return this.toHtmlString()\r\n    }\r\n    toHtmlString() {\r\n        let str = `<tr>\r\n        <td>${this.id}</td>\r\n        <td>${this.name}</td>\r\n        <td>${this.type}</td>\r\n        <td>${this.color}</td>        \r\n        </tr>`\r\n        return str\r\n    }\r\n}\r\n\r\nexport default DataSrc\r\n","import React, { Component } from 'react'\r\nimport $ from 'jquery'\r\nimport Dock from 'react-dock'\r\nimport RandomColor from 'randomcolor'\r\nimport FileForm from './FileForm'\r\nimport DataSrc from './DataSrc'\r\n\r\nimport Debugger from './Debugger'\r\n\r\n/* TODO SQL 대응 */\r\n//import SqlForm from \"./SqlForm\"\r\n\r\nclass DataSource extends Component {\r\n    state = {\r\n        dataSources: [],\r\n        dataSrcId: 0\r\n    }\r\n\r\n    closePanel = () => {\r\n        this.props.onClose(this.state)\r\n    }\r\n\r\n    handleFile = (data) => {\r\n        console.log(data)        \r\n        let datasrc = new DataSrc(\r\n            this.state.dataSrcId,\r\n            data.file.name, \r\n            'csv', RandomColor({ seed: data.file.name }).replace(\"#\", \"\"), \r\n            data.csv.data, \r\n            data.csv.meta.fields)\r\n        this.setState((state) => ({\r\n            dataSrcId: state.dataSrcId + 1,\r\n            dataSources: state.dataSources.concat(datasrc)\r\n        }))        \r\n        this.props.onDataUpdate(this.state)\r\n    }\r\n\r\n    removeDataSrc = (e) => {        \r\n        let row = e.target.parentNode.parentNode                \r\n        // get current position of datasrc in dataSources\r\n        let id = parseInt($(row).attr(\"datasrcid\"))        \r\n\r\n        this.setState({\r\n            dataSources: this.state.dataSources.filter(datasrc => datasrc.id !== id)\r\n        }, () => {\r\n            if(this.state.dataSources.length == 0){\r\n                this.setState({\r\n                    dataSrcId: 0\r\n                })\r\n            }\r\n        })\r\n        Debugger.p(this, 'src removed')\r\n        this.props.onDataUpdate(this.state)\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        Debugger.p(this, 'render after')\r\n        // DataMaster Upload CSV clicked                \r\n    }    \r\n    shouldComponentUpdate(nextProps, nextState){\r\n        Debugger.p(this, 'beforeUpdate', this.props, nextProps, this.state, nextState)\r\n        if(this.props.isSrcUpdated){\r\n            return true\r\n        }\r\n        switch (nextProps.promptType){\r\n            case 'csv':\r\n                $(\"#fileform\").modal('show')\r\n                break\r\n            case 'sql':\r\n                break\r\n            case 'api':\r\n                break\r\n        }\r\n        \r\n        if(this.props.isVisible === nextProps.isVisible){\r\n            return false\r\n        } \r\n        return true\r\n    }\r\n\r\n    render() {       \r\n        Debugger.p(this, 'render') \r\n        const list = this.state.dataSources.map((datasrc) => {            \r\n            return (<tr key={datasrc.id} datasrcid={datasrc.id}>\r\n            <th scope=\"row\">{datasrc.id}</th>\r\n            <td>{datasrc.name}</td>\r\n            <td>{datasrc.type}</td>\r\n            <td style={{backgroundColor:datasrc.color}}>{datasrc.color}</td>\r\n            <td>{datasrc.positions.length}</td>\r\n            <td><button className=\"btn btn-danger\" onClick={this.removeDataSrc}>Remove</button></td>\r\n        </tr>)})\r\n\r\n        return (            \r\n            <Dock position='right' zIndex={1100} dimMode='none' isVisible={this.props.isVisible}>\r\n                <div className=\"container-fluid m-2\">\r\n                    <div className=\"row my-2\">\r\n                        <div className=\"col d-flex align-items-center\">\r\n                            <button className=\"btn btn-danger\" onClick={this.closePanel}> Close </button>\r\n                        </div>\r\n                        <div className=\"col d-flex align-items-center\">\r\n                            <h5>Data Sources</h5>\r\n                        </div>\r\n                        <div className=\"d-flex col justify-content-end\">\r\n                        <div className=\"btn-group\">\r\n                            <button className=\"btn btn-success\" data-toggle=\"modal\" data-target=\"#fileform\"> CSV </button>\r\n                            <button className=\"btn btn-primary\" > SQL </button>\r\n                            <button className=\"btn btn-info\" > API </button>\r\n                        </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row my-2\">\r\n                        <table className=\"table\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th scope='col'>id</th>\r\n                                    <th scope='col'>name</th>\r\n                                    <th scope='col'>type</th>\r\n                                    <th scope='col'>color</th>\r\n                                    <th scope='col'>positions</th>\r\n                                    <th scope='col'></th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {list}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                <FileForm onCreate={this.handleFile} />\r\n            </Dock>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataSource\r\n","const DaumMap = window.daum.maps\r\n\r\nconst MAX_FIX = 100\r\n\r\nclass LocationFix {\r\n    constructor(srcId, deviceId, id, lat, lng, fixtime, servertime, color, ref) {\r\n        this.srcId = srcId\r\n        this.deviceId = deviceId\r\n        this.id = id\r\n        this.lat = parseFloat(lat)\r\n        this.lng = parseFloat(lng)\r\n        this.fixtime = fixtime ? fixtime : (\"NaT\")\r\n        this.servertime = servertime ? servertime : this.fixtime        \r\n        this.color = color\r\n    }    \r\n    daumMarker(map){\r\n        let marker = new DaumMap.Marker({            \r\n            map: map,\r\n            clickable: true,\r\n            position: new DaumMap.LatLng(this.lat, this.lng),                     \r\n            image: new DaumMap.MarkerImage(\r\n                //'http://localimg.daum-img.net/localimages/07/2009/map/icon/blog_icon01_on.png',\r\n                \"http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|\" + this.color,\r\n                new DaumMap.Size(31, 35),\r\n                {\r\n                    offset: new DaumMap.Point(16, 34),\r\n                    alt: \"Source: \" + this.srcId,\r\n                    shape: \"poly\",\r\n                    coords: \"1,20,1,9,5,2,10,0,21,0,27,3,30,9,30,20,17,33,14,33\"\r\n                }\r\n            )  \r\n        })\r\n        return marker\r\n    }\r\n    static srcToFixGroups(dataSrc){\r\n        /* 소스 당 동일한 공통 파라미터 */\r\n        let srcId = dataSrc.id\r\n        let defaultColor = dataSrc.color    \r\n        let limit = MAX_FIX\r\n\r\n        // 모든 점을 파싱할 때\r\n        // let fixGroup = []\r\n        // fixGroup = fixGroup.concat(dataSrc.positions.map((pos, index) => {\r\n        //     pos.deviceId = pos.deviceId ? pos.deviceId : srcId\r\n        //     pos.id = pos.id ? pos.id : index\r\n        //     return new LocationFix(srcId, pos.deviceId, pos.id, pos.lat, pos.lng, pos.fixtime, pos.servertime, defaultColor)\r\n        // }))            \r\n        //return fixGroup\r\n\r\n        // 최대 제한 파싱 지점\r\n        let limitFixGroup = []\r\n        dataSrc.positions.some((pos, index) => {          \r\n            pos.deviceId = pos.deviceId ? pos.deviceId : srcId\r\n            pos.id = pos.id ? pos.id : index\r\n            let fix = new LocationFix(srcId, pos.deviceId, pos.id, pos.lat, pos.lng, pos.fixtime, pos.servertime, defaultColor)\r\n            limitFixGroup.push(fix)            \r\n            console.log(index, limit)\r\n            return index === (limit - 1)\r\n        })\r\n        \r\n        return limitFixGroup\r\n    }\r\n    static flattenFixGroups(fixGroups){\r\n        let fixes = []\r\n        fixGroups.forEach(group => {        \r\n            fixes = fixes.concat(group)                        \r\n        })        \r\n        return fixes\r\n    }\r\n}\r\n\r\nexport default LocationFix\r\n","import React, { Component } from 'react'\r\nimport Dock from 'react-dock'\r\nimport ContentEditable from 'react-contenteditable'\r\nimport LocationFix from './LocationFix'\r\nimport $ from 'jquery'\r\n\r\nimport Debugger from './Debugger'\r\n/* TODO SQL 대응 */\r\n//import SqlForm from \"./SqlForm\"\r\n\r\nclass DataControl extends Component {\r\n    state = {                \r\n        dataSources: this.props.dataSources,\r\n        isFixUpdated: false,\r\n        fixGroups: [],\r\n        fixes: [],\r\n        lastFixId: 0,        \r\n    }\r\n\r\n    closePanel = () => {               \r\n        this.props.onClose(this.state)\r\n    }\r\n\r\n    toggleMarker = (evt) => {\r\n        let row = $(evt.target).closest(\"tr\")\r\n        let id = parseInt($(row).attr(\"fixid\"))\r\n        console.log(\"이 마커를 바꿔요\", row, id)\r\n    }    \r\n\r\n    handleChange = evt =>{        \r\n        // 현재 객체 지정하려면 currentTarget\r\n        let row = $(evt.currentTarget).closest(\"tr\")\r\n        let id = parseInt($(row).attr(\"fixid\"))                \r\n        if(/^[0-9A-F]{6}$/i.test(evt.target.value)){            \r\n            this.setState({\r\n                fixes: this.state.fixes.map(fix => {                    \r\n                    if(fix.id === id){                        \r\n                        fix.color = evt.target.value\r\n                    }\r\n                    return fix\r\n                })\r\n            }, () => {\r\n                Debugger.p('fix color 업데이트', this.state.fixes)\r\n                this.props.onUpdate(this.state.fixes)\r\n            })            \r\n        }\r\n        // For #fff type hex : https://stackoverflow.com/questions/8027423/how-to-check-if-a-string-is-a-valid-hex-color-representation/8027444\r\n        // var isOk  = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test('#ac3')\r\n    }\r\n\r\n    /**\r\n     * 재렌더링을 할거냐 말거냐를 정하는 부분이다\r\n     * 리액트는 변한 부분만 렌더링 한다... 너무 렌더링을 막을 필요는 없다.\r\n     */     \r\n    shouldComponentUpdate(nextProps, nextState){        \r\n        // 소스가 변경되었을 때\r\n        Debugger.p(this, '클릭된 마커', this.props.focusFixId)\r\n        if(this.props.focusFixId !== nextProps.focusFixId){            \r\n            let id = nextProps.focusFixId\r\n            console.log(\"포커스 변경\", id, $(`#fixtable tr[fixid='${id}']`).html())\r\n            console.log(\"스크롤링\", $(`#fixtable tr[fixid='${id}']`).offset().top)\r\n            $(\"#datacontrol\").animate({\r\n                scrollTop: $(`#fixtable tr[fixid='${id}']`).offset().top\r\n            }, 2000)\r\n        }\r\n        if(this.props.isSrcUpdated) {        \r\n            Debugger.p(this, 'fix updates!')    \r\n            let fixGroups = nextProps.dataSources.map(LocationFix.srcToFixGroups)                   \r\n            this.setState({\r\n                fixGroups: fixGroups,\r\n                lastFixId : fixGroups.map(fixGroup => fixGroup.length).reduce((sum, item) => sum+item),\r\n                fixes: LocationFix.flattenFixGroups(fixGroups)                \r\n            })\r\n            this.props.onUpdate(LocationFix.flattenFixGroups(fixGroups))\r\n            return true\r\n        }        \r\n        return true\r\n    }     \r\n\r\n    render() {\r\n        Debugger.p(this, 'render')\r\n        const table = this.state.fixes.map((fix, id) => {\r\n            return (\r\n                <tr key={id} fixid={id} scope='row'>\r\n                    <td>{fix.srcId}</td>\r\n                    <td>{fix.deviceId}</td>\r\n                    <td>{fix.id}</td>\r\n                    <td>{fix.lat}</td>\r\n                    <td>{fix.lng}</td>\r\n                    <td>{fix.fixtime}</td>\r\n                    <td>{fix.servertime}</td>\r\n                    <td style={{backgroundColor:'#'+fix.color}}>\r\n                        <ContentEditable                            \r\n                        html={fix.color}\r\n                        disabled={false}\r\n                        onChange={this.handleChange} \r\n                        className={`fixid${fix.id}`}\r\n                        />\r\n                    </td>\r\n                    <td className='w-15'>\r\n                        <div className='btn-group'>\r\n                        <button onClick={this.toggleMarker} className='btn btn-secondary'>Show/Hide</button>\r\n                        <button className='btn btn-secondary'>Fn2</button>\r\n                        <button className='btn btn-secondary'>Fn3</button>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        })\r\n        return (           \r\n            <Dock id=\"datacontrol\" position='bottom' zIndex={1101} dimMode='none' isVisible={this.props.isVisible}>   \r\n                <div className=\"container-fluid\">                    \r\n                    <div className=\"row mt-2\">\r\n                        <div className=\"col\">\r\n                            <button className=\"btn btn-danger\"onClick={this.closePanel}> Close </button>      \r\n                        </div>\r\n                        <div className=\"col d-flex align-items-center\">\r\n                            <h5>Data Control</h5>\r\n                        </div>                        \r\n                        <div className=\"col-3 d-flex justify-content-end mr-1\">              \r\n                            <div className=\"input-group\">\r\n                                <input type='number' className='form-control' placeholder=\"Max # of Points (100)\" />\r\n                                <div className='input-group-append'>\r\n                                    <button className=\"btn btn-outline-success\"> Reset (예정.. 새로고침하세요) </button>     \r\n                                    <button className=\"btn btn-outline-primary\"> Fn2 </button>     \r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <table id=\"fixtable\" className=\"table table-sm\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope='col' className='w-10'>Source ID</th>\r\n                                <th scope='col' className='w-11'>Device ID</th>\r\n                                <th scope='col' className='w-10'>id</th>\r\n                                <th scope='col' className='w-10'>lat</th>\r\n                                <th scope='col' className='w-10'>lng</th>\r\n                                <th scope='col' className='w-14'>fixtime</th>\r\n                                <th scope='col' className='w-14'>servertime</th>\r\n                                <th scope='col' className='w-10'>color</th>\r\n                                <th scope='col' className='w-10'>show/hide</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody> \r\n                            {table}                           \r\n                        </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>                             \r\n            </Dock>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataControl\r\n","import React, { Component } from 'react'\r\nimport DataSource from \"./DataSource\"\r\nimport DataControl from \"./DataControl\"\r\n\r\nimport Debugger from './Debugger'\r\n\r\n\r\nclass DataMaster extends Component {\r\n    state = {\r\n        data: null,\r\n        isVisiableDataSource: false,\r\n        isVisiableDataControl: true,\r\n        promptType: null,        \r\n        dataSources: [],\r\n        isSrcUpdated: false,\r\n        fixes: this.props.fixes,\r\n        focusFixId: this.props.focusFixId\r\n    }        \r\n\r\n    componentDidUpdate(prevProps, prevState){\r\n        // Reset UI Properties\r\n        if(this.state.promptType === 'csv'){\r\n            this.setState({\r\n                promptType: null\r\n            })\r\n        }\r\n\r\n        if(this.state.isSrcUpdated){\r\n            Debugger.p(this, '업뎃 트랜잭션 종료')\r\n            this.setState({\r\n                isSrcUpdated: false\r\n            })\r\n        }\r\n    }\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        Debugger.p(this, 'beforeUpdate/sourceupdated?', this.state, nextState)        \r\n        return true\r\n    }\r\n\r\n    closeDataControl = () => {        \r\n        this.setState({\r\n            isVisiableDataControl: false\r\n        })\r\n    }\r\n    \r\n    toggleDataControl = () => {\r\n        this.setState({\r\n            isVisiableDataControl : !this.state.isVisiableDataControl\r\n        }, () => {console.log(\"토글DC\", this.state.isVisiableDataControl)})        \r\n        \r\n    } \r\n\r\n    updateFixes = (fixes) => {\r\n        Debugger.p(this, 'updated fixes', fixes)\r\n        this.setState({\r\n            fixes: fixes\r\n        })\r\n        this.props.updateFixes(fixes)\r\n    }\r\n\r\n    // Data Source Control    \r\n    openWithCsv = () => {                \r\n        this.setState({\r\n            isVisiableDataSource: true,\r\n            promptType: 'csv'\r\n        })\r\n    }\r\n\r\n    closeDataSource = () => {        \r\n        this.setState({\r\n            isVisiableDataSource: false,\r\n            promptType: null\r\n        })\r\n    }\r\n\r\n    toggleDataSource = () => {       \r\n        Debugger.p(this, 'toggle')\r\n        this.setState({\r\n            isVisiableDataSource : !this.state.isVisiableDataSource,\r\n            promptType: null\r\n        })                \r\n    }   \r\n    \r\n    dataUpdate = (data) => {    \r\n        Debugger.p(this,'src list change')    \r\n        this.setState({\r\n            dataSources: data.dataSources,\r\n            isSrcUpdated: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        Debugger.p(this, 'render')\r\n        return (\r\n            <div className=\"dataMaster\">                \r\n                <div className=\"d-flex justify-content-starts\">\r\n                    <nav className=\"navbar navbar-expand-lg navbar-light bg-light col\">\r\n                        <a className=\"navbar-brand\" href=\"/\">DataMaster</a>\r\n                        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"true\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                            <div className=\"navbar-nav\">                                                                                                \r\n                                <button className=\"btn btn-outline-primary mx-2\" onClick={this.toggleDataControl}>Data Control</button>                               \r\n                                <div className=\"btn-group mx-2\">                                \r\n                                    <button className=\"btn btn-outline-success\" onClick={this.toggleDataSource}>Data Sources</button>                                                                \r\n                                    <button className=\"btn btn-secondary\" onClick={this.openWithCsv}>Upload CSV</button>                                \r\n                                    <button className=\"btn btn-secondary\" >Connect SQL</button>           \r\n                                    <button className=\"btn btn-secondary\" >Traccar API</button>           \r\n                                </div>                                \r\n                            </div>\r\n                        </div>\r\n                    </nav>\r\n                </div>\r\n                <DataSource \r\n                    onDataUpdate={this.dataUpdate} \r\n                    onClose={this.closeDataSource} \r\n                    isVisible={this.state.isVisiableDataSource} \r\n                    promptType={this.state.promptType} \r\n                    dataSources={this.state.dataSources} \r\n                    isSrcUpdated={this.state.isSrcUpdated}\r\n                />\r\n                <DataControl \r\n                    onClose={this.closeDataControl}\r\n                    onUpdate={this.updateFixes}\r\n                    isVisible={this.state.isVisiableDataControl}\r\n                    dataSources={this.state.dataSources}\r\n                    isSrcUpdated={this.state.isSrcUpdated}\r\n                    focusFixId={this.props.focusFixId}\r\n                />       \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DataMaster","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React, { Component } from 'react';\n\nimport './App.css';\nimport Debugger from './Debugger'\n\nimport MapProvider from \"./MapProvider\";\nimport DataMaster from \"./DataMaster\"\n\nclass App extends Component {\n    \n    state = {\n        fixes: [],\n        isFixUpdated: false,\n        focusFixId: 0\n    }\n\n    componentDidUpdate(){\n        Debugger.p(this, 'after render')\n\n        if(this.state.isFixUpdated){\n            Debugger.p(this, '업뎃 트랜잭션 종료')\n            this.setState({\n                isFixUpdated: false\n            })\n        }\n    }\n\n    updateFixes = (data) => {        \n        Debugger.p(this, 'get updated fixes:', data)\n        this.setState({\n            fixes: data,\n            isFixUpdated: true\n        })\n    }\n\n    focusFix = (fixId) =>{\n        console.log(\"이마커가 찍힘\", fixId)\n        this.setState({\n            focusFixId: fixId\n        })\n    }\n\n    render() {        \n        Debugger.p(this, 'render')\n        return (\n            <div className=\"d-flex flex-column app\">            \n                <DataMaster\n                    fixes={this.state.fixes} \n                    updateFixes={this.updateFixes} \n                    focusFixId={this.state.focusFixId} />                                \n                <MapProvider \n                    fixes={this.state.fixes} \n                    isFixUpdated={this.state.isFixUpdated} \n                    onFocus={this.focusFix} />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\r\n\r\nimport App from './App';\r\n\r\nconst Root = () => {\r\n  return (\r\n\r\n      <App />\r\n\r\n  );\r\n};\r\n\r\nexport default Root;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Root from './Root';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}